#!/usr/bin/env python

import os
import sys
import time
import traceback
import argparse
from argparse import RawTextHelpFormatter

SCRIPTDIR=os.path.dirname(os.path.abspath(__file__))


#read default settings
#settingsfile=~/.rasplex
#[ -f "$settingsfile" ] && source "$settingsfile"

class Config:

    def __init__(self,args):

        if args.tag is not None:
            self.version = args.tag
        elif args.branch is not None:
            self.version = args.branch
        elif args.sha is not None:
            self.version = args.sha
        elif args.wip is not None:
            self.version = "wip"

        self.ci = args.ci
        self.force = args.force
    	self.rebuild = args.rebuild
    	self.image  = args.image
    	self.kernel  = args.kernel

        self.distroname = "rasplex"
        self.devtools = False
        self.tmpdir = "{}/tmp".format(SCRIPTDIR)
        self.outimagename = "{}-{}.img".format(self.distroname,self.version)
        self.outimagefile = "{}/{}".format(self.tmpdir,self.outimagename)
        self.targetdir = "{}/target".format(SCRIPTDIR)
        self.rpversion = self.version.replace("RP-","")
        self.outfilename="{}-RPi.arm-{}".format(self.distroname,self.rpversion)

        
        configstr=""" 
        RASPLEX_VERSION=\"{}\" # a numeric version is needed here if possible
        RASPLEX_REF=\"{}\" # we want to preserve the exact ref that they gave us
        DISTRONAME=\"{}\"
        """.format(self.rpversion,self.version,self.distroname)

        if args.linkfast:
            configstr+="RASPLEX_SPEEDYLINK=\"yes\""
        self.linkfast=args.linkfast

        if (args.debug):
            configstr+="\nRASPLEX_BUILDTYPE=\"debug\""
            configstr+="\nOPENELEC_VERSION=\"devel\""
            self.buildtype_str="DEVTOOLS=\"yes\" DEBUG=\"yes\""
            self.oeversion="devel"
            self.buildtype="debug"

        else:
            configstr+="\nRASPLEX_BUILDTYPE=\"release\""
            self.buildtype_str="LIVEDEBUG=\"yes\""
            self.buildtype="release"

            oeversion = open(os.path.join(SCRIPTDIR,"config/version"))

            for line in oeversion:
                if line.find("OPENELEC_VERSION") >=0:
                    self.oeversion = line.split("OPENELEC_VERSION=")[1].strip().replace("\"","")

            oeversion.close()

        rpversion = open(os.path.join(SCRIPTDIR,"config/rasplex"),"w")

        

        rpversion.write(configstr)
        rpversion.close()


    def __str__(self):
        strrep =""
        for each in self.__dict__:
            strrep += each + " => "+str(self.__dict__[each]) + "\n"
	return strrep

# build
def  build(config):
    print "Building rasplex"


#    os.system("rm -rf  {}/build.rasplex-RPi.arm-{}/plexht*".format(SCRIPTDIR,
#                                                                config.oeversion))
   
    if config.kernel:
        kernel_stamps = ["linux","linux-drivers","linux-initramfs","busybox","busybox-initramfs"]

        for stamp in kernel_stamps:
            if stamp != "":
                print "deleting stamp {}".format(stamp)
                os.system("rm -r {}/build.rasplex-RPi.arm-{}-{}/.stamps/{}".format(SCRIPTDIR,config.oeversion,config.buildtype,stamp))

    if (config.force):
        os.system("rm -r {}/build.rasplex-RPi.arm-{}-{}/.stamps/plexht".format(SCRIPTDIR,config.oeversion,config.buildtype))

    
    if config.version == "wip":
        if not os.path.isdir("{}/build.rasplex-RPi.arm-{}-{}".format(SCRIPTDIR,config.oeversion,config.buildtype)):
            os.mkdir("{}/build.rasplex-RPi.arm-{}-{}".format(SCRIPTDIR,config.oeversion,config.buildtype))
        os.system("ln -sf {}/plex-home-theater {}/build.rasplex-RPi.arm-{}-{}/plexht-{}".format(SCRIPTDIR,SCRIPTDIR,config.oeversion,config.buildtype,config.version))
        version = os.popen("git --git-dir={}/plex-home-theater/.git  rev-parse HEAD".format(SCRIPTDIR)).read().strip()

    else:
        print "Running build against ref {}".format(config.version)
        os.system("mkdir -p {}/build.rasplex-RPi.arm-{}-{}/plexht-{}".format(SCRIPTDIR, config.oeversion, config.buildtype, config.version))
        version = os.popen("git --git-dir={}/plex-home-theater/.git  rev-parse {}".format(SCRIPTDIR, config.version)).read().strip()
        os.system("git --git-dir={}/plex-home-theater/.git  fetch".format(SCRIPTDIR))
        #os.system("git --git-dir={}/plex-home-theater/.git checkout {}".format(SCRIPTDIR,config.version)) 
        os.system("git --work-tree={}/build.rasplex-RPi.arm-{}-{}/plexht-{}  --git-dir={}/plex-home-theater/.git checkout {} -- .".format(
                                                                            SCRIPTDIR,config.oeversion,config.buildtype,config.version,SCRIPTDIR,config.version))
        os.system("cp {}/tools/rasplex/sync-repo  {}/build.rasplex-RPi.arm-{}-{}/plexht-{}".format(SCRIPTDIR,SCRIPTDIR,config.oeversion,config.buildtype,config.version)) 

        verfile = open ("{}/build.rasplex-RPi.arm-{}-{}/plexht-{}/rasplex_version.txt".format(SCRIPTDIR,config.oeversion,config.buildtype,config.version),'w')
        verfile.write(config.version.replace("RP-",""))
        verfile.close()


    verfile = open ("{}/build.rasplex-RPi.arm-{}-{}/plexht-{}/GitRevision.txt".format(SCRIPTDIR,config.oeversion,config.buildtype,config.version),'w')
    verfile.write(version)
    verfile.close()

    if config.ci:
        print "building in CI mode"
        pipe = os.popen("{} PROJECT=RPi ARCH=arm make release -j `nproc`".format(config.buildtype_str))
        output = pipe.read()
        lines = output.split("\n")
        print lines[-9000:-1]
        
        rc = pipe.close()
    else:
        rc = os.system("{} PROJECT=RPi ARCH=arm make release -j `nproc` || exit 2".format(config.buildtype_str))


    return rc
def create_image(config):
    print "Creating SD image"


    target = os.path.join(config.targetdir, config.outfilename)

    os.system("mkdir -p {}".format(config.tmpdir))
    os.system("rm -rf {}/*".format(config.tmpdir))
    os.system("cp {}.tar {}".format(target, config.tmpdir))
    
    print "  Extracting release tarball..."
    os.system("tar -xpf {}.tar -C {} ".format(target, config.tmpdir)) 
    
    print "  Setup loopback device..."
    freedev = os.popen("sudo losetup -f").read().strip()
    print freedev
    if freedev != "/dev/loop0":
        os.system("sudo umount /dev/loop0")
        os.system("sudo losetup -d /dev/loop0")

    
    print "  Prepare image file..."
    os.system("dd if=/dev/zero of={} bs=1M count=910".format(config.outimagefile))
    
    print "  Write data to image..."
    os.chdir("{}/{}".format(config.tmpdir,config.outfilename))
    rc=os.system("sudo ./create_sdcard /dev/loop0 {}".format(config.outimagefile)) 
    if rc == 0: 
        print "Created SD image at {}".format(config.outimagefile)
    return rc


def update():
  
    
    if not binaryQuestion("Are you sure you want to update? This will stash any uncommitted changes. They can be restored with 'git stash apply'"):
        print "Update aborted by user"
        exit(0)
    
    output = ""

    print "Stashing changes"
    try:
   
        sys.stdout.write( "Updating openelec...")
        output += os.popen("git stash").read()
        output += os.popen("git checkout rasplex-dev").read()
        output += os.popen("git pull origin rasplex-dev").read()
        print "done. OpenELEC is now at:"
        print os.popen("git --no-pager log --pretty=o -n 1").read()

        sys.stdout.write("Updating plex-home-theater...") 
        output+= os.popen("git submodule update --remote").read()
        output+= os.popen("git submodule status").read()
    except:
        err = traceback.format_exc()
        print err

        print "OH FUCK! Something went wrong! Blame Dale (be nice)"
        print output
        print "Check your stash, any unsaved work should still be there"
        raise Exception

    print "Any uncommited changes you had are now stashed."
    print "\tPlease run git stash apply to get your changes back (you may need to merge!)"
    print "Google git stash apply to figure out how to get them back"
    print "Update complete, please re-run buildman to do a build"


def binaryQuestion(question, default="yes"):
    
    valid = {"yes":True,   "y":True,  "ye":True, "no":False,     "n":False}
    
    if default == None:
        prompt = " [y/n] "
    
    elif default == "yes":
        prompt = " [Y/n] "
    
    elif default == "no":
        prompt = " [y/N] "
    
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
    
        if default is not None and choice == '':
            return valid[default]
        
        elif choice in valid:
            return valid[choice]
        
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")



#def upload_sourceforge():
#    projectdir="/home/frs/project/rasplex"
#    projectdlbase="http://sourceforge.net/projects/rasplex/files"
#    [ -z "$user" ] && user=`whoami`
#    
#    print "Distributing build"
#    
#    cd "$tmpdir"
#
#    print "  compressing image..."
#    gzip "$outimagefile"
#    
#    print "  uploading autoupdate package"
#    time scp "$outfilename".tar "$user@frs.sourceforge.net:$projectdir/autoupdate/$distroname/"
#     
#    print "  uploading install image"
#    if [ $devbuild -eq 1 ];then
#        releasedir="development"
#    else
#        releasedir="release"
#    fi
#    time scp "$outimagefile.gz" "$user@frs.sourceforge.net:$projectdir/$releasedir/"    
#
# main

def main(args):

    if args.update:
        update()
        exit()


    config = Config(args)
    print config

    if config.rebuild:
        rc = build(config)

        if rc != 0:
            exit(rc)

    if config.image:
        rc = create_image(config)

    exit(rc)

       #if [ $devbuild -eq 1 ];then
    #    distroname="rasplexdev"
    #    devtools="yes"
    #    print "This is a development build!"
    #fi
# set rasplex config

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='A script for managing stack states', formatter_class=RawTextHelpFormatter, epilog="""
To update to latest rasplex-dev branches:\n
\t./buildman -u\n
To link plex-home-theater to build.rasplex-XXX/plexht-wip and run a build\n
\t./buildman -w -r -f\n
To build against the tag RP-X.X.X:\n
\t./buildman -t RP-X.X.X -r -f\n
To generate an image from completed build tagged RP-X.X.X:\n
\t./buildman -t RP-X.X.X -i\n
""")
    reftype = parser.add_mutually_exclusive_group(required=True)
    reftype.add_argument('-t', '--tag', help="Build against specified tag")
    reftype.add_argument('-b', '--branch', help="Build against specified branch")
    reftype.add_argument('-s', '--sha', help="Build against specified sha")
    reftype.add_argument('-w', '--wip', action="store_true", help="Build against current working tree state")
    reftype.add_argument('-u', '--update', action="store_true", help="Update to the latest dev code")
    parser.add_argument('-i', '--image', action="store_true", help="Generate .img file from succesful build.")
    parser.add_argument('-r', '--rebuild', action="store_true", help="Run a build")
    parser.add_argument('-f', '--force', action="store_true", help="force a rebuild of plexht")
    parser.add_argument('-d', '--debug', action="store_true", help="Build with debug tools")
    parser.add_argument('-l', '--linkfast', action="store_true", help="Link PHT without linktime optimization")
    parser.add_argument('-k', '--kernel', action="store_true", help="Force kernel and initramfs rebuild")
    parser.add_argument('-c', '--ci', action="store_true", help="Run as CI")

    args = parser.parse_args()


    try:
        start = time.time()
        main(args)

    except SystemExit:
        pass
    except:
        err = traceback.format_exc()
        print err
    finally:
        end = time.time()
 
    print "Request processed in {:04,.2f}s".format(end-start)
